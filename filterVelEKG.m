% filterVelEKG.m Goes through files generated by lsSpeed.m.

% Modification History:
% add a histogram
% Plot velocity data from pic_to_veldatanewsope and allows user to select
% the range of good velocities
% 12-09-04 Adding Flux capabilities
% 12-23-04 Add stim-triggered abilites. only 1 stim channel, 1 analog
% channel
% Check and compares with official version of view-velocities
% 02-19-05 closing files to deal with memory problems
% 07-26-05 Stim Trig avg
% 09-16-05: Make official version
% 10-20-05: stimthresh for stimulus has to be smaller for some files
% 10-21-05: change the method for pausing, and going throughmany movies
% 10-01-07: changed file name
% 03-11-08: also calculate abs(vels)
% 08-12-14: adapted for Silva lab

close all, clear all
fprintf('\nfilterVelEKG\n\n')

%% User Parameters

runavgtime = 5000;
select_range = 1;
Twin = .5; % length of time to look for min/max (s)
threshforstim = 0; % or 50

% Running parameters
prompt = {'Save file(s) at the end?', 'Analog signal? (yes/no)?'};
def = {'yes','ignoreMe'};
dlgTitle = 'Processing parameters';
lineNo = 1;
answer = inputdlg(prompt,dlgTitle,lineNo,def,'on');

if strcmp(answer(1), 'yes')
    saveFile = 1;
else
    saveFile = 0;
end

if strcmp(answer(2), 'yes')
    useana = true;
else
    useana = false;
end

%% set up save parameters
if saveFile % write data
    [filename, pathname] = uiputfile('filteredVel.csv', 'Comma delimited file save As');
    cd(pathname)
    Datafile = [pathname, filename];
    Datafiletemp = [pathname, 'temp-', filename];
end

if saveFile   
    dirName = uigetdir('*.mat', 'select the folder containing unfiltered velocity file(s)');
    files = dir([dirName '/*.mat']);
    cd(dirName);
    nmovies = length(files); %only counts .mat files

    Names = 'Names';
    Velocities = 'Velocity';
    StdDev = 'Std. Dev.';
    AbsVelocities = 'Abs Vel';
    AbsStdDev = 'Abs Std. Dev.';
    MinRanges = 'Minimum';
    MaxRanges = 'Maximum';
    PerValids = '% Points Valid';
    AvgSyss = 'Systolic Vel.';
    AvgDias = 'Diastolic Vel.';
else
    [fname,pname] = uigetfile('*.*');
    openFile = [pname, fname];
    load(openFile);
    nmovies = 1;
end

for i = 1:nmovies % loop through data
    if saveFile
        openFile = [dirName '/' files(i).name];
    end
    
    disp(['loading:  ' openFile]);
    load(openFile);

    if not(exist('Tfactor','var'))
        Tfactor = 1.333;
    end

    if not(exist('WinPixelsDown','var'))
        WinPixDown = 32;
    else
        WinPixDown = WinPixelsDown;
        clear WinPixelsDown;
    end

    % assign data variables
    time = squeeze(result(:,2))/1000; %timeVel is now in seconds
    lines = squeeze(result(:,1));
    vel = squeeze(result(:,3));

    % smooth velocities
    numtoavg = ceil(runavgtime/(WinPixDown/Tfactor));
    convbox = ones([1 numtoavg])'/numtoavg;
    smoothed = convn(vel, convbox, 'same');

    avg = mean(vel);
    stdev = std(vel);

% this was based on MPScan acquisition--likely 512x512 pixels and 3.39 fps.
% Need to adapt to Zeiss LSM780 NLO if they were to be used
%     % calculate frequency
%     Y = fft(vel, 512);
%     Pyy = Y.* conj(Y) / 512;
%     f = 1000/WinPixDown*Tfactor*(0:256)/512;

    OrigPoints = length(vel);

    % normalize analog data
    if useana
        voltsEKGNorm = double(voltsEKG)/max(abs(double(voltsEKG)));
    end

    % plot everything
    fig1 = figure;
    set (fig1, 'Units', 'normalized', 'Position', [.1, .1, .8 .8] );
    Plotvel = subplot('Position',[.05 .6 .6 .3]);
    Plotana = subplot('Position',[.05 .1 .6 .3]);
    Plothist = subplot('Position', [.7 .6 .25 .3]);
    Plotfreq = subplot('Position', [.7 .1 .25 .3]);
    orient landscape;

    subplot(Plotvel);
    plot(time, vel, 'b.'); hold on;
    plot(time, smoothed, 'b')
    xlabel({'time (s)', strrep(openFile,'\','\\')})
    ylabel('velocity (mm/s)')
    title(['velocity: ', num2str(avg), 'mm/s  std. dev.: ', num2str(stdev)])
    hold on
    ys = ylim;

% no need for this now (8/13/14) but could reimplement in the future
%     subplot(Plotfreq)
%     semilogy(f, Pyy(1:257))
%     title('frequency of velocity')
%     xlabel('Hz')
%     hold on

    subplot(Plothist);
    [n, xout] = hist(vel,25);
    barh(xout,n, 'b');
    title('histogram of velocity')
    xlabel('count')
    ylabel('velocity (mm/s)')
    ylim(ys)

    if useana % plot analog channel
        figure(fig1); subplot(Plotana)
        plot(timeEKG,voltsEKGNorm,'b'); hold on
        title('EKG')
        ylabel('normalized voltage')
        xlabel('time (s)');
    end

    if select_range
        good_range = 0;

        while not(good_range)
            subplot(Plotvel);
            plot(time, vel, '.');
            xlabel({'time (s)', strrep(openFile,'\','\\')})
            ylabel('velocity (mm/s)')
            title(['velocity: ', num2str(avg), 'mm/s  std. dev.: ', num2str(stdev)])
            currentys = ylim;
            hold on

%             subplot(Plotfreq)
%             semilogy(f, Pyy(1:257))
%             xlabel('Hz')
%             hold on

            % ask user for input to select range of velocities
            set(gcf, 'Name', 'press any key to continue')
            w = 0;

            while w == 0
                w = waitforbuttonpress;
            end

            limitok = 0;

            while not(limitok); % check that upper limit > lower limit
                prompt = {'Upper Limit',...
                    'Lower Limit'};
                def = {num2str(currentys(2)), num2str(currentys(1))};
                dlgTitle = 'Valid velocities for data';
                lineNo = 1;
                answer = inputdlg(prompt,dlgTitle,lineNo,def,'on');
                UpLimit = str2double(answer(1));
                LowLimit = str2double(answer(2));

                if UpLimit > LowLimit
                    limitok = 1;
                else
                    beep
                end %check limits ok
            end

            % Deal with Outliers
            outliers = (vel<=LowLimit) | (vel>=UpLimit);
            % remove outliers
            velFiltered = vel;
            timeFiltered = time;
            velFiltered(outliers) = [];
            timeFiltered(outliers) = [];
            
            if saveFile
            fileNameVelEKG = [dirName '/' strrep(files(i).name,'velEKG','filteredVelEKG')];
            fileNameVel = [dirName '/' strrep(files(i).name,'vel','filteredVel')];           
%             fileNameVelEKG = strrep(openFile,'velEKG','filteredVelEKG');
%             fileNameVel = strrep(openFile,'vel','filteredVel');

                if useana
                    disp(['saving:  ' fileNameVelEKG]);
                    save(fileNameVelEKG, 'timeEKG', 'voltsEKGNorm', 'timeFiltered', 'velFiltered');
                else
                    disp(['saving:  ' fileNameVel]);
                    save(fileNameVel, 'timeFiltered', 'velFiltered','info');
                end
            end
            [NewPoints,p] = size(velFiltered);
            PercentValid = 100*NewPoints/OrigPoints;

            smoothed2 = convn(velFiltered, convbox, 'same');
            avg = mean(velFiltered);
            absavg = mean(abs(velFiltered));
            stdev = std(velFiltered);
            absstdev = std(abs(velFiltered));

            % Plot
            figure(fig1); subplot(Plotvel)
            plot(timeFiltered, velFiltered, '-ro'); hold on;
            plot(timeFiltered, smoothed2, 'r')
            xlabel({'time (s)', strrep(openFile,'\','\\')})
            ylabel('velocity (mm/s)')
            title(['velocity: ', num2str(avg), 'mm/s  std. dev.: ', num2str(stdev), ' % valid:', num2str(PercentValid), '% ','min: ', num2str(LowLimit), '  max:', num2str(UpLimit)])
            hold off; ys = ylim;

%             Y = fft(velFiltered, 512);
%             Pyy = Y.* conj(Y) / 512;
%             f = 1000/WinPixDown*Tfactor*(0:256)/512;
%             subplot(Plotfreq)
%             semilogy(f, Pyy(1:257), 'ro')
%             xlabel('Hz')
%             hold off

            figure(fig1)
            subplot(Plothist);
            [n2 xout2] = hist(velFiltered,25);
            barh(xout,n, 'b');
            hold on;
            barh(xout2, n2, 'r');
            hold off
            ylim(ys);
            title('PRESS A KEY WHEN DONE')

            figure(fig1); subplot(Plotvel);
            ys = ylim;
            subplot(Plothist);
            ylim(ys);

            % Allow user to move stuff around
            set(gcf, 'Name', 'press a key to continue')
            w = 0;

            while w == 0
                w = waitforbuttonpress;
            end

            button = questdlg('Use this range?',...
                'Continue Operation','Yes','No','No');

            if strcmp(button,'Yes')
                good_range = 1;
            end
        end
    end

    if saveFile
        Names = strvcat(Names, files(i).name);
        Velocities = strvcat(Velocities, num2str(avg));
        StdDev = strvcat(StdDev, num2str(stdev));
        AbsVelocities = strvcat(AbsVelocities, num2str(absavg));
        AbsStdDev = strvcat(AbsStdDev, num2str(absstdev));

        if select_range
            MinRanges = strvcat(MinRanges, num2str(LowLimit));
            MaxRanges = strvcat(MaxRanges, num2str(UpLimit));
            PerValids = strvcat(PerValids, num2str(PercentValid));
        end

        % save cummulative data everytime
        commas = char(44*ones(i+1,1));

        if select_range
            tosave = horzcat(char(Names), commas, char(Velocities), commas, char(StdDev), commas,char(AbsVelocities), commas, char(AbsStdDev),commas, MinRanges, commas, MaxRanges,commas, PerValids); %,commas, AvgSyss, commas, AvgDias); TEMP
        else
            tosave = horzcat(char(Names), commas, char(Velocities), commas, char(StdDev), commas,char(AbsVelocities), commas,char(AbsStdDev));
        end

        diary(Datafiletemp)
        tosave(i+1,:)
        diary off;
    end; % if use many

    close(fig1)
end % loop through movies

if saveFile % write data

    commas = char(44*ones(nmovies+1,1));

    if select_range
        tosave = horzcat(char(Names), commas, char(Velocities), commas, char(StdDev), commas,char(AbsVelocities), commas,char(AbsStdDev), commas, MinRanges, commas, MaxRanges,commas, PerValids); %,commas, AvgSyss, commas, AvgDias); TEMP
    else
        tosave = horzcat(char(Names), commas, char(Velocities), commas, char(StdDev), commas,char(AbsVelocities), commas,char(AbsStdDev));
    end

    diary(Datafile)
    tosave
    diary off
end

% movefile(Datafile,strrep(Datafile,'.csv','.xls'),'f');